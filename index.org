# -*- mode: org; -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="readtheorg.css"/>
#+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.slim.min.js"></script>
#+HTML_HEAD: <script src="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript">$('document').ready(function(){$('#text-table-of-contents ul').first().addClass('nav');$('body').scrollspy({target:'#text-table-of-contents'});});</script>

#+TITLE: Exuanbo's Wiki
#+AUTHOR: Exuanbo

#+BEGIN_CENTER
This document is built using Emacs [[https://orgmode.org/][Org mode]] with the [[https://github.com/fniessen/org-html-themes][ReadTheOrg]] theme, inspired by [[https://geekplux.com/][GeekPlux]]. I'm still learning and exploring this amazing tool.
#+END_CENTER

- [[http://catb.org/~esr/faqs/hacker-howto.html][How To Become A Hacker]]
- [[http://www.catb.org/~esr/faqs/smart-questions.html][How To Ask Questions The Smart Way]]
- [[https://uses.tech/][/uses]] - A list of /uses pages detailing developer setups, gear, software and configs

* Life
** Minimalism
** IME
*** 双拼
- [[https://sspai.com/post/33019][选择输入法的哲学：兼论双拼的优缺点 - 少数派]]
  - 录入文字的过程可以简单分为两个环节：1. 大脑将思考的内容转化为可以通过键盘录入的内容（比如字形、字音）；2. 通过键盘将字形或字音录入电脑并组合为最终文字。
  - *我们的大脑更容易把思维转化为声音而不是文字* ，甚至有很多人必须先把思维转化为声音然后才能进一步转化为文字：我们见过很多人在输入的时候嘴里念念有词，这就是通过声音来辅助文字呈现的一种方式，但我们从来没见过有人说话的时候，需要拿支笔边写边说。
  - 双拼输入法是拼音输入法的一种，因此它继承了拼音输入法在第一环节的优势；而由于简化了复合声母和韵母，在第二环节的效率追平甚至超过了五笔输入法。

**** Practice
- 强制替换电脑和手机上的输入法
- 打印键位并贴到墙上
- 使用讯飞输入法键位皮肤
- 微信聊天背景设为键位图

**** Resource
- [[https://www.flypy.com/][小鹤双拼·小鹤音形 - 官方网站]]

*** RIME
**** Squirrel
- [[https://github.com/placeless/squirrel_config][placeless/squirrel_config]] - Rime 鼠须管小鹤双拼配置
- [[https://github.com/cnfeat/Rime][cnfeat/Rime]] - 鼠须管 小鹤双拼 输入法配置及配色方案

** Bypass GFW
- [[https://www.v2ray.com/][V2Ray]]
  - [[https://guide.v2fly.org/advanced/wss_and_web.html][WebSocket + TLS + Web]]
- [[https://github.com/trojan-gfw/trojan][trojan-gfw/trojan]]
- [[https://github.com/TheWanderingCoel/Trojan-Qt5][TheWanderingCoel/Trojan-Qt5]] - Windows, macOS, Linux
- [[https://github.com/yichengchen/clashX/tree/master][ClashX]] - macOS
- [[https://apps.apple.com/us/app/shadowrocket/id932747118][Shadowroket]] - iOS
- [[https://github.com/Hackl0us/SS-Rule-Snippet][Hackl0us/SS-Rule-Snippet]] - Surge / Quantumult / Shadowrocket / Surfboard / clash(X) 实用规则
- [[https://github.com/geekdada/surgio][geekdada/surgio]] - Generating rules for Surge, Clash, Quantumult... like a PRO

** Marathon
- 知乎圆桌[[https://www.zhihu.com/roundtable/marathon2015/][《马拉松之路》]]
- [[https://www.zhihu.com/question/21557037][有哪些配合马拉松训练的核心力量训练项目或计划？ - 知乎]]
  - 核心力量训练是指针对核心区域肌肉（主要是腹部、下背部和骨盆部肌群）及其深层小肌肉进行的力量、稳定、平衡等能力的训练，它不同于传统的腰腹力量训练，而是使核心区域的整体原动肌和局部稳定肌均能通过训练得到发展和提高。核心力量训练的目的就是使整个机体协调起来，确保训练者在做动作时核心肌群起到稳定躯体，传输能量的作用。
- [[https://www.zhihu.com/question/62561329][越野跑和公路跑有哪些区别？ - 知乎]]
- [[http://thespiral.fm/episodes/4][Episode 004 — 当我们谈跑步时，我们谈些什么]]
  - 跑步是对现实生活的逃避，是一种解脱或者说移情。
- 动画[[https://movie.douban.com/subject/30238385/][《强风吹拂》]]
  - [[http://thespiral.fm/episodes/5][Episode 005 — 纵使强风起，人生不言弃]]
    - 对一个跑者的最高赞美是什么。快吗？我觉得应该是强。
    - 无论你处于什么立场、曾经有过什么样的遭遇，面对跑步这件事，所有人都得站在同一条起跑线上。不论最后是成功或失败，在这个当下，都取决于自己这幅身躯。正因为如此，才会有快乐，有痛苦，最后是无上的自由。

** Podcast
- [[https://sspai.com/post/58577][播客届的京派与海派 - 少数派]]
  - 时隔近百年，当下的中文播客圈，听众之中流行着一个说法，将中文播客分类为「陪伴型 / 湿货」和「硬核型 / 干货」两种类型。苹果发布的 2019 年最佳中文播客榜单中，不乏「大内密谈」「日谈公园」「跟宇宙结婚」这样的「闲话类」陪伴型播客，也丰盈着「忽左忽右」「博物志」「声东击西」「不可理论」等信息度相对密集、知识点充沛的播客节目。前者往往以北京为核心，主要是北方语系；后者则以上海为中心，且基本有海外背景。

*** App
泛用型播客客户端：
- [[https://castro.fm/][Castro]] - iOS | Recommand
- [[https://overcast.fm/][Overcast]] - iOS
- [[https://www.pocketcasts.com/][Pocket Casts]] - Android & iOS

*** Explore
- [[https://letter.getpodcast.xyz/][播客 Feed 订阅]]
- [[https://typlog.com/podlist/][中文独立播客]] - 发现与推荐高质量的中文独立播客

Jesse Chan ([[https://twitter.com/Jesoooor][@Jesoooor]]) 言：
#+begin_quote
独立 = 创作过程不受限制、影响。

这个限制和影响可能来自资本、技术、商业、受众。但你不可能找到一个一刀切的标准来定义「独立」。

小众厂牌 Spotify 独占，能叫独立音乐吗？微软独占的《Cuphead》叫独立游戏吗？

这是要从内容本身出发去判断的，真正「独立」的内容会散发出独一无二的气质。
#+end_quote

*** Subscription
Favorites：
- [[https://teacherluke.co.uk/][Luke's English Podcast]]
- [[https://casticle.fm/][Casticle]]
  - 是一档探索并发现优质单期英文播客的中文节目。每期节目将为你推荐三期不同主题或类型的英文播客，讲述这些播客的精彩之处，整理与其相关的信息与知识。我们希望能帮助你更高效地接触英文原生内容，并享受随之而来的快乐与启发。
- [[http://rss.lizhi.fm/rss/1959617.xml][得意忘形]]
  - 是一个主张追求个体自由与探寻真理的实验计划。我们见证了第一次工业革命以来科技对人类社会的极大推动与助益，但也意识到资本主义与市场经济不可避免地催生了消费文化、剥夺了个人价值、并窃取了大众时间。带着对生命的有限性与无目的性的敬畏，我们试图为读者与听众提供更全面的觉察自我与认知世界的工具，以不断重建当下的方式穿越时间、抵达生活的本质。
- [[https://byte.coffee/][Byte.Coffee]]
  - 一家以 Engineer 视角面对世界的字节咖啡店，提供一支独立极简、健康明亮、科学主调、人文余韵的声波咖啡豆。人间指南主播 hb 曾打趣说是「科技与人文十字路口的街角咖啡店」，我觉得需要改成「科学与人文的十字路口」，特指自然科学。技术固然重要，但背后的科学是基础是理论是根基，一名科研工作者必须谨记这一点。
- [[https://czgx.fireside.fm/rss][迟早更新]]
  - 这是一档探讨科技、商业、设计和生活之间混沌关系的播客节目，也是风险基金 ONES Ventures 关于热情、趣味和好奇心的音频记录。我们希望通过这档播客，能让熟悉的事物变得新鲜，让新鲜的事物变得熟悉。
- [[http://feed.tangsuanradio.com/gadio.xml][机核网 GADIO 游戏广播]]
- [[http://web.archive.org/web/20160604093615/http://antiwave.net/][反波 Antiwave - web.archive.org]]

*** Episode
** Subscriptions
*** App
*** Web Service
*** Entertainment

* Job
** Prepare
- [[https://www.zhihu.com/question/24099873][如何得到 Google 的工作机会？ - 知乎]]
- [[https://github.com/geekcompany/ResumeSample][geekcompany/ResumeSample]] - 程序员简历模板系列
- [[https://github.com/azl397985856/fe-interview][azl397985856/fe-interview]] - 大前端面试宝典
- [[https://labuladong.gitbook.io/algo/][labuladong的算法小抄]]

*** Interview
[[https://github.com/jwasham/coding-interview-university][jwasham/coding-interview-university]]

** Resource
- [[https://github.com/greatghoul/remote-working][greatghoul/remote-working]] - 本列表只收录中国国内的资源或者对国内受众友好的国外资源

** Experience
- [[https://www.zhihu.com/question/39610449][在谷歌日本(Google Japan)工作是怎样一番体验？ - 知乎]]

* Language Learning
** English
*** Vocabulary
- [[https://www.zhihu.com/question/26814125][你是如何将词汇量提升到 2 万，甚至 3 万的？ - 知乎]]

**** 单词表选择
- [[https://www.wordfrequency.info/purchase.asp][Word frequency: based on 450 million word COCA corpus]]

*** Grammar
- 英语语法新思维初级/中级/高级教材
- [[https://book.douban.com/subject/5038844/][英语常用词疑难用法手册 - 豆瓣]]
- [[https://book.douban.com/subject/3424236/][McGraw-Hill's Essential American Idioms - 豆瓣]]

*** Listening
- [[http://elllo.org/][ELLLO - English Listening Lesson Library Online]]

*** Reading
- "Stuff White People like"
- "How to Be Black"
- "Hunger of Memory"
- "Dataclysm"
- [[https://www.procon.org/][ProCon.org - Pros and Cons of Controversial Issues]]
- [[https://www.activelylearn.com/][Actively Learn]] - 任务导向型阅读训练

*** Speaking
- "White Girl Problems" - novel
- "New Girl" - TV Series
- "Girls" - TV Series
- "Jessie" - TV Series
- "Dream School" - Netflix TV Series

* Reading
** Magazine
- [[https://aeon.co/][Aeon | a new world of ideas]]
- [[https://longform.org/][Longform]]

** Blog
- [[http://www.yinwang.org/][当然我在扯淡 - 王垠]]
- [[https://blog.imalan.cn/][无文字 | 三无计划]]
- [[https://jesor.me/][大破进击]]
- [[https://www.phodal.com/][Phodal - 狼和凤凰 | Growth Engineer]]

* Writing
* Design
- [[https://sspai.com/tag/%E8%AE%BE%E8%AE%A1][#设计 - 少数派]]

* Open Source
- [[https://opensource.guide/][Open Source Guides]]
- [[https://github.phodal.com/][GitHub 漫游指南]] by [[https://www.phodal.com/][Phodal Huang]]

* Computer Science
- [[https://github.com/ossu/computer-science][ossu/computer-science]] - Path to a free self-taught education in Computer Science
- [[https://www.bilibili.com/video/av21376839/][Crash Course Computer Science]] - 中英字幕

* Programming
- [[http://coolshell.cn/articles/4990.html][程序员技术练级攻略 - 2011年07月]]
  - [[https://exuanbo.xyz/posts/programmer/][2018 新版索引]]
- [[https://blog.knownsec.com/Knownsec_RD_Checklist/index.html][知道创宇研发技能表]] - "聪明的人，会根据每个tip自驱动扩展"

* Web
** CSS
- [[https://github.com/robsheldon/sscaffold-css][robsheldon/sscaffold-css]] - Combines css rules from normalize.css and skeleton.css
- [[https://css-tricks.com/new-year-new-job-lets-make-a-grid-powered-resume/][New Year, New Job? Let's Make a Grid-Powered Resume! | CSS-Tricks]]

** Nginx Configuration
[[https://gist.github.com/fotock/9cf9afc2fd0f813828992ebc4fdaad6f][fotock/nginx.conf]] - Nginx SSL 安全配置最佳实践

#+begin_src shell
# 生成 dhparam.pem 文件, 在命令行执行任一方法:

# 方法1: 很慢
openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048

# 方法2: 较快
# 与方法1无明显区别. 2048位也足够用, 4096更强
openssl dhparam -dsaparam -out /etc/nginx/ssl/dhparam.pem 4096
#+end_src

*** nginx.conf
#+begin_src conf
# 阅读更多 http://tautt.com/best-nginx-configuration-for-security/

# 不发送Nginx版本号
server_tokens off;

# 不允许浏览器在frame或iframe中显示页面
# 避免 点击劫持(clickjacking) http://en.wikipedia.org/wiki/Clickjacking
# 如果需要允许 [i]frames, 你可以用 SAMEORIGIN 或者用ALLOW-FROM uri 设置单个uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# 服务用户提供的内容时, 包含 X-Content-Type-Options: nosniff 头选项，配合 Content-Type: 头选项,
# 来禁用某些浏览器的 content-type 探测.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# 当前支持 IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 火狐 '不久'支持 https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;

# 启用大部分现代浏览器内置的 the Cross-site scripting (XSS) 过滤.
# 通常缺省情况下已经启用, 所以本选项为为本网站重启过滤器，以防其被用户禁用.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# 启用 Content Security Policy (CSP) (和支持它的浏览器(http://caniuse.com/#feat=contentsecuritypolicy)后,
# 你可以告诉浏览器它仅能从你明确允许的域名下载内容
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# 修改应用代码, 通过禁用css和js的 'unsafe-inline' 'unsafe-eval' 指标提高安全性
# (对内联css和js同样适用).
# 更多: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

# 将所有 http 跳转至 https
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name .forgott.com;
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name .forgott.com;

  ssl_certificate /etc/nginx/ssl/star_forgott_com.crt;
  ssl_certificate_key /etc/nginx/ssl/star_forgott_com.key;

  # 启用 session resumption 提高HTTPS性能
  # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
  ssl_session_cache shared:SSL:50m;
  ssl_session_timeout 1d;
  ssl_session_tickets off;

  # DHE密码器的Diffie-Hellman参数, 推荐 2048 位
  ssl_dhparam /etc/nginx/ssl/dhparam.pem;

  # 启用服务器端保护, 防止 BEAST 攻击
  # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
  ssl_prefer_server_ciphers on;
  # 禁用 SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  # ciphers chosen for forward secrecy and compatibility
  # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  # 启用 ocsp stapling (网站可以以隐私保护、可扩展的方式向访客传达证书吊销信息的机制)
  # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
  resolver 8.8.8.8 8.8.4.4;
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /etc/nginx/ssl/star_forgott_com.crt;

  # 启用 HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # 避免 ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  # 或 https://hstspreload.org/
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

  # ... 其他配置
}
#+end_src

** Resource
- [[https://simpleicons.org/][Simple Icons]] - Free SVG icons for popular brands
- [[https://github.com/refactoringui/heroicons][refactoringui/heroicons]] - A set of free MIT-licensed high-quality SVG icons for UI development

* iOS
* Game
** Development
- [[https://indienova.com/groups/14][我们都爱像素风 - Indienova 小组]]

* Git
** Pull-Request steps
[[http://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/][The beginner's guide to contributing to a GitHub project]]
1. Fork the project and clone locally
2. ~git remote add upstream git@github.com:xxx/xxx.git~
3. ~git checkout -b newBranch~
4. Do something and commit
5. ~git pull --rebase upstream master~
6. ~git push origin~

** Github Pages
- [[https://stackoverflow.com/questions/11577147/how-to-fix-http-404-on-github-pages][How to fix HTTP 404 on Github Pages?]] If you don't use Jekyll, the workaround is to place a file named ~.nojekyll~ in the root directory.

** Command
#+begin_src shell
git init  # 在当前目录新建一个 Git 代码库
git clone [url]  # 下载一个项目和它的整个代码历史
git config --list # 显示当前的 Git 配置
git config -e [--global]  # 编辑 Git 配置文件
git add  # 添加指定文件到暂存区
git rm   # 删除工作区文件，并且将这次删除放入暂存区
git commit -m [message]  # 提交暂存区到仓库区
git commit -a # 提交工作区自上次 commit 之后的变化，直接到仓库区
git commit --amend -m [message]   # 使用一次新的 commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息
git commit --amend [file1] [file2] ...  # 重做上一次 commit，并包括指定文件的新变化

# 分支相关
git branch  # 列出所有本地分支
git branch -r  # 列出所有远程分支
git branch [branch-name]  # 新建一个分支，但依然停留在当前分支
git checkout [branch-name]  # 切换到指定分支，并更新工作区
git checkout -b [branch]  # 新建一个分支，并切换到该分支
git branch [branch] [commit]  # 新建一个分支，指向指定 commit
git checkout -b [branch] [tag]  # 新建一个分支，指向某个 tag
git branch --track [branch] [remote-branch]  # 新建一个分支，与指定的远程分支建立追踪关系
git branch --set-upstream [branch] [remote-branch]  # 建立追踪关系，在现有分支与指定的远程分支之间
git merge [branch]  # 合并指定分支到当前分支
git cherry-pick [commit]  # 选择一个 commit，合并进当前分支
git branch -d [branch-name]  # 删除分支
git push origin --delete [branch-name] # 删除远程分支
git branch -dr [remote/branch]  # 删除远程分支

# 标签
git tag  # 列出所有 tag
git tag [tag] # 新建一个 tag 在当前 commit
git tag [tag] [commit] # 新建一个 tag 在指定 commit
git show [tag]  # 查看 tag 信息
git push [remote] [tag]  # 提交指定 tag
git push [remote] --tags   # 提交所有 tag

# 查看
git status # 显示有变更的文件
git log # 显示当前分支的版本历史
git log --stat # 显示 commit 历史，以及每次 commit 发生变更的文件
git log --follow [file] # 显示某个文件的版本历史，包括文件改名
git log -p [file] # 显示指定文件相关的每一次 diff
git blame [file] # 显示指定文件是什么人在什么时间修改过
git diff # 显示暂存区和工作区的差异
git diff --cached [file] # 显示暂存区和上一个 commit 的差异
git diff HEAD # 显示工作区与当前分支最新 commit 之间的差异
git diff [first-branch]...[second-branch] # 显示两次提交之间的差异
git show [commit] # 显示某次提交的元数据和内容变化
git show --name-only [commit] # 显示某次提交发生变化的文件
git show [commit]:[filename] # 显示某次提交时，某个文件的内容
git reflog # 显示当前分支的最近几次提交

# 远程
git fetch [remote] # 下载远程仓库的所有变动
git remote -v  # 显示所有远程仓库
git remote show [remote]  # 显示某个远程仓库的信息
git remote add [shortname] [url]  # 增加一个新的远程仓库，并命名
git pull [remote] [branch]  # 取回远程仓库的变化，并与本地分支合并
git push [remote] [branch] # 上传本地指定分支到远程仓库
git push [remote] --force # 强行推送当前分支到远程仓库，即使有冲突
git push [remote] --all # 推送所有分支到远程仓库

# 撤销
git checkout [file] # 恢复暂存区的指定文件到工作区
git checkout [commit] [file] # 恢复某个 commit 的指定文件到工作区
git checkout . # 恢复上一个 commit 的所有文件到工作区
git reset [file] # 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变
git reset --hard # 重置暂存区与工作区，与上一次 commit 保持一致
git reset [commit] # 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变
git reset --hard [commit] # 重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致
git reset --keep [commit] # 重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变
git revert [commit] # 新建一个 commit，用来撤销指定 commit，后者的所有变化都将被前者抵消，并且应用到当前分支
#+end_src

* Text Editor
** Emacs
- [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org][mastering-emacs-in-one-year-guide/guide-zh.org at master · redguardtoo/mastering-emacs-in-one-year-guide]]
- [[http://planet.emacsen.org/][Planet Emacsen]]

** Spacemacs
[[https://github.com/syl20bnr/spacemacs][spacemacs]] 是一款社区维护的 Emacs 配置，结合了 vim 和 Emacs 两者的优点。

*** Dotfile Configuration
A dotdirectory ~~/.spacemacs.d/~ can be used instead of a dotfile. If you want to use this option, move ~~/.spacemacs~ to ~~/.spacemacs.d/init.el~.

参考 [[https://github.com/zilongshanren/spacemacs-private][子龙山人的个人配置]] 和 GeekPlux 的 [[https://github.com/geekplux/dotfiles][dotfiles]]

*** Tips
- [[https://github.com/syl20bnr/spacemacs/issues/3920][Environment variable warnings #3920]] - Put ~(setq exec-path-from-shell-arguments '("-l"))~ in your ~dotspacemacs/user-init~

* Org Mode
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://orgmode.org/worg/index.html][Hello Worg, the Org-Mode Community!]]
- [[https://github.com/fniessen/refcard-org-mode][fniessen/refcard-org-mode]] - Org mode syntax
- [[https://beorgapp.com/][beorg]] - iOS | Recommand
- [[http://mobileorg.github.io/][Mobile Org]] - iOS | Open Source

#+begin_src emacs-lisp
(defun dotspacemacs/user-config ()
  (with-eval-after-load 'org
    (setq org-startup-indented t)
    (setq org-html-doctype "html5")
    ))
#+end_src

[[https://github.com/gongzhitaao/orgcss][gongzhitaao/orgcss]]

When exported to HTML, there are three options for code highlighting, controlled by the variable ~org-html-htmlize-output-type~.

1. ~(setq org-html-htmlize-output-type 'inline-css)~

    This is the default setting. It highlights the code according to the current Emacs theme you are using. It directly applies color to the code with inline styles, e.g., ~<span style="color: 0x000000">int</span>~.

    The problem is that the highlight theme depends on the Emacs theme. If you use a dark theme in your Emacs but a light theme (usually we like light themed web pages) web pages, the exported code are hardly illegible due to the light font color, or vice versa.

2. ~(setq org-html-htmlize-output-type nil)~

    This configuration disables highlighting by ~htmlize~. You may use a third-party Javascript highlight library. I recommend [[https://highlightjs.org/][highlight.js]] if I need code highlight.

    There are two problems:

    1. The problem is that you have to rely on highlight.js support on a certain language which is occasionally missing, e.g., ~emacs-lisp~, ~org~, etc.
    2. ~highlight.js~ by default does not recognized the tags and classes exported by org mode. You need some extra Javascript code in your Org file.

3. ~(setq org-html-htmlize-output-type 'css)~

    This is similar to the first optional, instead of using inline styles, this will assign classes to each component of the code, e.g., ~<span class="org-type">int</span>~, and you could create your own stylesheet for ~.org-type~.

    To obtain a list of all supported org classes, run ~M-x org-html-htmlize-generate-css~.  This will create a buffer containing all the available org style class names in the current Emacs session.

* LaTeX
* OS
** Linux
** MacOS
- [[https://github.com/jaywcjlove/awesome-mac][Awesome Mac]]
- [[https://github.com/serhii-londar/open-source-mac-os-apps][Awesome macOS open source applications]]
- [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]]
- [[http://brew.sh/][Homebrew]]
  - [[https://github.com/phinze/homebrew-cask][homebrew-cask]]
  - ~brew leavese~ Show installed formulae that are not dependencies of another installed formula
  - [[https://github.com/beeftornado/homebrew-rmtree][beeftornado/homebrew-rmtree]] - Remove a formula and its unused dependencies
- [[https://github.com/gnachman/iTerm2][iTerm2]]
- [[http://www.alfredapp.com/][Alfred]]
  - [[http://www.alfredworkflow.com/][alfredworkflow]]

*** Setup
- [[http://sourabhbajaj.com/mac-setup/index.html][Mac OS X Setup Guide]]
- 改变 Launchpad 中应用图标的大小
  #+begin_src shell
  defaults write com.apple.dock springboard-columns -int 列数
  defaults write com.apple.dock springboard-rows -int 行数
  defaults write com.apple.dock ResetLaunchPad -bool TRUE
  killall Dock
  #+end_src

** Windows
* Self-hosting
[[https://github.com/awesome-selfhosted/awesome-selfhosted][awesome-selfhosted]]

This is a list of Free Software network services and web applications which can be hosted locally. Non-Free software is listed on the Non-Free page.

** Analytics
*** Ackee
[[https://ackee.electerious.com/][Ackee]] - Self-hosted analytics tool for those who care about privacy. ~MIT~ ~Nodejs~

[[https://github.com/electerious/Ackee/blob/master/docs/SSL%20and%20HTTPS.md][SSL and HTTPS]] - Nginx configuration
#+begin_src conf
#
# Set "$cors_header" to avoid "if" inside location context
# https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
# https://stackoverflow.com/questions/14499320/how-to-properly-setup-nginx-access-control-allow-origin-into-response-header-bas
#
map $http_origin $cors_header {
    default "";
    ~*^https://([^/]+\.)*(domainone|domaintwo)\.com$ $http_origin;
}

#
# Redirect all www to non-www
#
server {
    listen 80;
    listen 443 ssl;

    server_name www.example.com;

    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    return 301 https://example.com$request_uri;
}

#
# Redirect all non-encrypted to encrypted
#
server {
    listen 80;

    server_name example.com;

    return 301 https://example.com$request_uri;
}

#
# There we go
#
server {
    listen 443 ssl http2;

    server_name example.com;

    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    access_log /var/log/nginx/log/example.com.access.log main;
    error_log  /var/log/nginx/log/example.com.error.log;

    location / {
        add_header          Access-Control-Allow-Origin "$cors_header" always;
        add_header          Access-Control-Allow-Methods "GET, POST, PATCH, OPTIONS" always;
        add_header          Access-Control-Allow-Headers "Content-Type" always;
        add_header          Strict-Transport-Security "max-age=31536000" always;
        add_header          X-Frame-Options deny;
        proxy_pass          http://localhost:3000;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_redirect      off;
        proxy_buffering     off;
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
#+end_src
