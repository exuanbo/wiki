# -*- mode: org; -*-

#+HTML_HEAD: <!-- inject-inline: /assets/head.html -->
#+HTML_HEAD: <style>/* inject-inline: /build/style.css */</style>
#+HTML_HEAD: <script>/* inject-inline: /build/script.js */</script>

#+TITLE: Exuanbo's Wiki
#+AUTHOR: Exuanbo

#+BEGIN_CENTER
This page is built using Emacs [[https://orgmode.org/][Org mode]] with [[https://gulpjs.com/][Gulp.js]], inspired by [[https://geekplux.com/][GeekPlux]].
Source code is hosted in this [[https://github.com/exuanbo/wiki][repo]].
#+END_CENTER

* Life
** Style
*** Minimalism
- [[https://manuelmoreale.com/thoughts/mgtm-introduction][Introduction: What Minimalism is and is not – Manu]]
  - To me, Minimalism has nothing to do with anything visual.
  - I wouldn't call minimalism a lifestyle. I'd much rather refer to it as a
    mindset or a guiding principle.

*** Self-control

** Skill
*** Typing
**** 双拼
- [[https://sspai.com/post/33019][选择输入法的哲学：兼论双拼的优缺点 - 少数派]]
  - 录入文字的过程可以简单分为两个环节：1. 大脑将思考的内容转化为可以通过键盘录
    入的内容（比如字形、字音）；2. 通过键盘将字形或字音录入电脑并组合为最终文字。
  - *我们的大脑更容易把思维转化为声音而不是文字* ，甚至有很多人必须先把思维转化
    为声音然后才能进一步转化为文字：我们见过很多人在输入的时候嘴里念念有词，这就
    是通过声音来辅助文字呈现的一种方式，但我们从来没见过有人说话的时候，需要拿支
    笔边写边说。
  - 双拼输入法是拼音输入法的一种，因此它继承了拼音输入法在第一环节的优势；而由于
    简化了复合声母和韵母，在第二环节的效率追平甚至超过了五笔输入法。

***** Practice
- 强制替换电脑和手机上的输入法
- 打印键位并贴到墙上
- 使用讯飞输入法键位皮肤
- 微信聊天背景设为键位图

***** Resource
- [[https://www.flypy.com/][小鹤双拼·小鹤音形 - 官方网站]]

**** RIME
- [[https://github.com/alswl/Rime][alswl/ Rime]] - Rime configuration for Squirrel (macOS) & fcitx-rime

***** Squirrel
- [[https://github.com/placeless/squirrel_config][placeless/ squirrel_config]] - Rime 鼠须管小鹤双拼配置
- [[https://github.com/cnfeat/Rime][cnfeat/ Rime]] - 鼠须管 小鹤双拼 输入法配置及配色方案

*** Bypass GFW
**** Server
- [[https://www.v2ray.com/][V2Ray]]
  - [[https://guide.v2fly.org/advanced/wss_and_web.html][WebSocket + TLS + Web]]
- [[https://github.com/trojan-gfw/trojan][trojan]]
  - [[https://github.com/TheWanderingCoel/Trojan-Qt5][TheWanderingCoel/ Trojan-Qt5]] - A cross-platform trojan GUI client based on
    Shadowsocks-qt
  - [[https://github.com/Jrohy/trojan][Jrohy/ trojan]] - trojan多用户管理部署程序, 支持web页面管理
- [[https://github.com/p4gefau1t/trojan-go][p4gefau1t/ trojan-go]] - Golang实现的Trojan代理，支持自动证书申请/多路复用/路
  由功能/CDN中转，多平台，无依赖

**** Client
***** App
- [[https://github.com/yichengchen/clashX/tree/master][yichengchen/ ClashX]] - macOS
- [[https://github.com/paradiseduo/ShadowsocksX-NG-R8][paradiseduo/ ShadowsocksX-NG-R8]] - macOS
- [[https://github.com/lzdnico/ClashWeb/tree/ClashWeb1.6.3][lzdnico/ ClashWeb]] - Windows
- [[https://apps.apple.com/us/app/shadowrocket/id932747118][Shadowroket]] - iOS | paid app

***** Subscription
- [[https://github.com/tindy2013/subconverter][tindy2013/ subconverter]] - Utility to convert between various subscription format
- [[https://bianyuan.xyz/][Sabrina Rule Generator]]
- [[https://gfwsb.114514.best/][Subscription Converter]]

***** Rules
- [[https://github.com/geekdada/surgio][geekdada/ surgio]] - Generating rules for Surge, Clash, Quantumult... like a
  PRO
- [[https://github.com/ConnersHua/Profiles/tree/master][ConnersHua/ Profiles at master]] - 神机规则
- [[https://github.com/lhie1/Rules][lhie1/ Rules]] - 洞主规则
- [[https://github.com/Hackl0us/SS-Rule-Snippet][Hackl0us/ SS-Rule-Snippet]] - Design for Surge, Quantumult, Shadowrocket,
  Surfboard, clash(X)

**** Other
- [[https://github.com/googlehosts/hosts][GoogleHosts]]

**** Tutorial
- [[https://trojan-tutor.github.io/2019/04/10/p41.html][自建梯子教程 --Trojan版本 | trojan-tutor]]

** Tool
- [[https://sspai.com/post/58805][在工具应用选择上，为什么我开始相信 Unix 哲学？ - 少数派]]
  - [[https://en.wikipedia.org/wiki/Unix_philosophy][Unix philosophy - Wikipedia]]
  - 理念 1. 一个应用，一个目标
  - 理念 2. 组合胜过单干
  - 理念 3. 一切皆文件
  - 最后， 寻找心中的「独角兽」

** Hobby
*** Marathon
- 知乎圆桌[[https://www.zhihu.com/roundtable/marathon2015/][《马拉松之路》]]
- [[https://www.zhihu.com/question/21557037][有哪些配合马拉松训练的核心力量训练项目或计划？ - 知乎]]

  核心力量训练是指针对核心区域肌肉（主要是腹部、下背部和骨盆部肌群）及其深层小肌
  肉进行的力量、稳定、平衡等能力的训练，它不同于传统的腰腹力量训练，而是使核心区
  域的整体原动肌和局部稳定肌均能通过训练得到发展和提高。核心力量训练的目的就是使
  整个机体协调起来，确保训练者在做动作时核心肌群起到稳定躯体，传输能量的作用。

- [[https://www.zhihu.com/question/62561329][越野跑和公路跑有哪些区别？ - 知乎]]
- [[http://thespiral.fm/episodes/4][Episode 004 — 当我们谈跑步时，我们谈些什么]]

  跑步是对现实生活的逃避，是一种解脱或者说移情。

- 动画[[https://movie.douban.com/subject/30238385/][《强风吹拂》]]
  - [[http://thespiral.fm/episodes/5][Episode 005 — 纵使强风起，人生不言弃]]
    - 对一个跑者的最高赞美是什么。快吗？我觉得应该是强。
    - 无论你处于什么立场、曾经有过什么样的遭遇，面对跑步这件事，所有人都得站在同
      一条起跑线上。不论最后是成功或失败，在这个当下，都取决于自己这幅身躯。正因
      为如此，才会有快乐，有痛苦，最后是无上的自由。

**** Gear
- [[https://www.garmin.com/][Garmin]]
  - [[https://sspai.com/post/55892][戴上 Garmin245，感受迎面吹拂的风 - 少数派]]
  - [[https://byte.coffee/54][Byte.Coffee: Episode 53: Always-on and beat yesterday]]
- [[https://ultimatedirection.com/][Ultimate Direction | Athlete-Inspired Hydration Packs & Water Belts]]

*** Podcast
- [[https://sspai.com/post/58577][播客届的京派与海派 - 少数派]]

  时隔近百年，当下的中文播客圈，听众之中流行着一个说法，将中文播客分类为「陪伴型
  / 湿货」和「硬核型 / 干货」两种类型。苹果发布的 2019 年最佳中文播客榜单中，不
  乏「大内密谈」「日谈公园」「跟宇宙结婚」这样的「闲话类」陪伴型播客，也丰盈着
  「忽左忽右」「博物志」「声东击西」「不可理论」等信息度相对密集、知识点充沛的播
  客节目。前者往往以北京为核心，主要是北方语系；后者则以上海为中心，且基本有海外
  背景。

**** App
泛用型播客客户端:

- [[https://castro.fm/][Castro]] - iOS | Recommand
- [[https://overcast.fm/][Overcast]] - iOS
- [[https://www.pocketcasts.com/][Pocket Casts]] - Android & iOS

**** Explore
- [[https://www.listennotes.com/][Listen Notes: The best podcast search engine]]

  The most comprehensive podcast database online. Discover best podcasts. Search
  podcast show notes and audio transcripts by people, places, or topics.

- [[https://letter.getpodcast.xyz/][播客 Feed 订阅]]
- [[https://typlog.com/podlist/][中文独立播客]] - 发现与推荐高质量的中文独立播客

Jesse Chan ([[https://twitter.com/Jesoooor][@Jesoooor]]) 言:

#+BEGIN_QUOTE
独立 = 创作过程不受限制、影响。

这个限制和影响可能来自资本、技术、商业、受众。但你不可能找到一个一刀切的标准来定义「独立」。

小众厂牌 Spotify 独占，能叫独立音乐吗？微软独占的《Cuphead》叫独立游戏吗？

这是要从内容本身出发去判断的，真正「独立」的内容会散发出独一无二的气质。
#+END_QUOTE

**** Subscription
- [[https://teacherluke.co.uk/][Luke's English Podcast]]
- [[https://casticle.fm/][Casticle]]

  这是一档探索并发现优质单期英文播客的中文节目。每期节目将为你推荐三期不同主题或
  类型的英文播客，讲述这些播客的精彩之处，整理与其相关的信息与知识。我们希望能帮
  助你更高效地接触英文原生内容，并享受随之而来的快乐与启发。

- [[http://rss.lizhi.fm/rss/1959617.xml][得意忘形]]

  这是一个主张追求个体自由与探寻真理的实验计划。我们见证了第一次工业革命以来科技
  对人类社会的极大推动与助益，但也意识到资本主义与市场经济不可避免地催生了消费文
  化、剥夺了个人价值、并窃取了大众时间。带着对生命的有限性与无目的性的敬畏，我们
  试图为读者与听众提供更全面的觉察自我与认知世界的工具，以不断重建当下的方式穿越
  时间、抵达生活的本质。

- [[https://byte.coffee/][Byte.Coffee]]

  一家以 Engineer 视角面对世界的字节咖啡店，提供一支独立极简、健康明亮、科学主调、
  人文余韵的声波咖啡豆。人间指南主播 hb 曾打趣说是「科技与人文十字路口的街角咖啡
  店」，我觉得需要改成「科学与人文的十字路口」，特指自然科学。技术固然重要，但背
  后的科学是基础是理论是根基，一名科研工作者必须谨记这一点。

- [[https://czgx.fireside.fm/rss][迟早更新]]

  这是一档探讨科技、商业、设计和生活之间混沌关系的播客节目，也是风险基金 ONES
  Ventures 关于热情、趣味和好奇心的音频记录。我们希望通过这档播客，能让熟悉的事
  物变得新鲜，让新鲜的事物变得熟悉。

- [[http://feed.tangsuanradio.com/gadio.xml][机核网 GADIO 游戏广播]]
- [[http://web.archive.org/web/20160604093615/http://antiwave.net/][反波 Antiwave - web.archive.org]]

**** Episode
- [[https://kernelpanic.fm/12][数学与编程 | 内核恐慌 #12]]

  特别嘉宾木遥与 Rio 和吴涛讨论了数学与编程之间的联系。话题包括但不限于：数学系
  的发展、统计学、数学与科学的关联、明尼苏达的天气、数学背景对于成为程序员的助益、
  Google 的工程师驱动特性、人们嘲讽新泽西的原因、养猫的经验、抽象几何学、Haskell、
  编程动手能力的来源、学习编程语言的意义、可视化编程、Lisp、FORTRAN、Go、C++、
  Swift、Optional、Google 的激励机制、欧洲的社会保障体制、技术变革带来的社会影响、
  中国政治坐标系测试、和食物替代饮料 Soylent。

** Digest
- [[https://sspai.com/post/59182][推荐丨2010s：我们仍在「故事」的中途 - 少数派]]

* Job
** Prepare
- [[https://www.zhihu.com/question/24099873][如何得到 Google 的工作机会？ - 知乎]]
- [[https://github.com/geekcompany/ResumeSample][geekcompany/ ResumeSample]] - 程序员简历模板系列
- [[https://github.com/azl397985856/fe-interview][azl397985856/ fe-interview]] - 大前端面试宝典
- [[https://labuladong.gitbook.io/algo/][labuladong的算法小抄]]

*** Interview
- [[https://github.com/jwasham/coding-interview-university][jwasham/ coding-interview-university]]

** Resource
- [[https://github.com/lukasz-madon/awesome-remote-job][lukasz-madon/ awesome-remote-job]] - A curated list of awesome remote jobs and
  resources
- [[https://github.com/greatghoul/remote-working][greatghoul/ remote-working]] - 本列表只收录中国国内的资源或者对国内受众友好的国外资源

** Experience
- [[https://www.zhihu.com/question/39610449][在谷歌日本(Google Japan)工作是怎样一番体验？ - 知乎]]

* General Learning

* Language
** English
*** Vocabulary
- [[https://www.zhihu.com/question/26814125][你是如何将词汇量提升到 2 万，甚至 3 万的？ - 知乎]]

**** 单词表选择
- [[https://www.wordfrequency.info/purchase.asp][Word frequency: based on 450 million word COCA corpus]]

*** Grammar
- 英语语法新思维初级/中级/高级教材
- [[https://book.douban.com/subject/5038844/][英语常用词疑难用法手册 - 豆瓣]]
- [[https://book.douban.com/subject/3424236/][McGraw-Hill's Essential American Idioms - 豆瓣]]

*** Listening
- [[http://elllo.org/][ELLLO - English Listening Lesson Library Online]]

*** Reading
- "Stuff White People like"
- "How to Be Black"
- "Hunger of Memory"
- "Dataclysm"
- [[https://www.procon.org/][ProCon.org - Pros and Cons of Controversial Issues]]
- [[https://www.activelylearn.com/][Actively Learn]] - 任务导向型阅读训练

*** Speaking
- "White Girl Problems" - novel
- "New Girl" - TV Series
- "Girls" - TV Series
- "Jessie" - TV Series
- "Dream School" - Netflix TV Series

* Reading
** Magazine
- [[https://aeon.co/][Aeon | a new world of ideas]]
- [[https://longform.org/][Longform]]

** Blog
- [[http://www.yinwang.org/][当然我在扯淡 - 王垠]]
- [[https://blog.imalan.cn/][无文字 | 三无计划]]
- [[https://jesor.me/][大破进击]]
- [[https://www.phodal.com/][Phodal - 狼和凤凰 | Growth Engineer]]

** Resource
- [[https://manybooks.net/][50,000+ Free eBooks in the Genres you Love | Manybooks]]

* Writing

* Design
- [[https://dribbble.com/][Dribbble - Discover the World’s Top Designers & Creative Professionals]]
- [[https://sspai.com/tag/%E8%AE%BE%E8%AE%A1][#设计 - 少数派]]

* Free & Open
- [[https://a.temporaryrecord.com/][a (not so) temporary record]]
- [[https://www.gnu.org/philosophy/free-sw.en.html][What is free software?]]
- [[https://www.gnu.org/philosophy/open-source-misses-the-point.html][Why Open Source Misses the Point of Free Software]]
- [[https://opensource.guide/][Open Source Guides]]
- [[https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html][如何选择开源许可证？ - 阮一峰的网络日志]]

  [[https://www.ruanyifeng.com/blogimg/asset/201105/free_software_licenses.png]]

** Privacy
- [[https://dnsprivacy.org/wiki/display/DP/DNS+Privacy+Daemon+-+Stubby][DNS Privacy Daemon - Stubby - DNS Privacy Project - Global Site]]
- [[https://www.logcg.com/archives/3127.html][DoT DoH 除了 DNSCrypt，你还可以了解一下更好的 DNS 加密方案 | 落格博客]]
- [[https://developers.cloudflare.com/1.1.1.1/dns-over-https/cloudflared-proxy/][Running a DNS over HTTPS Client - Cloudflare Resolver]]

** Eric S. Raymond's
- [[http://catb.org/~esr/][Home Page]]
- [[http://catb.org/~esr/faqs/hacker-howto.html][How To Become A Hacker]]
- [[http://catb.org/~esr/faqs/smart-questions.html][How To Ask Questions The Smart Way]]

** Resource
- [[https://awesomeopensource.com/][Find Open Source By Searching, Browsing and Combining 7,000 Topics]]

** Github
- [[https://github.phodal.com/][GitHub 漫游指南]] by [[https://www.phodal.com/][Phodal Huang]]
- [[https://rietta.com/blog/github-merge-types/][What's the Difference Between the 3 Github Merge Methods?]]

*** Github Pages
- [[https://stackoverflow.com/questions/11577147/how-to-fix-http-404-on-github-pages][How to fix HTTP 404 on Github Pages?]]

  If you don't use Jekyll, the workaround is to place a file named =.nojekyll=
  in the root directory.

*** Github Actions
- [[https://p3terx.com/archives/github-actions-started-tutorial.html][GitHub Actions 入门教程 - P3TERX ZONE]]
- [[https://p3terx.com/archives/github-actions-manual-trigger.html][GitHub Actions 手动触发方式 - P3TERX ZONE]]
  - Star
    #+BEGIN_SRC yaml
name: Test

on:
  watch:
    types: started

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
       - name: Checkout
         uses: actions/checkout@v2
# ...
    #+END_SRC

  - Webhook
    #+BEGIN_SRC yaml
name: Webhook Test

on:
  repository_dispatch:
    types: [helloworld, test, none]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Hello World
      if: contains(github.event.action, 'hello')
      run: |
        echo My name is P3TERX.
        echo Hello World!

    - name: TEST
      if: github.event.action == 'test'
      run: |
        echo test
    #+END_SRC

    #+BEGIN_SRC shell
curl -X POST https://api.github.com/repos/:owner/:repo/dispatches \
    -H "Accept: application/vnd.github.everest-preview+json" \
    -H "Authorization: token ACTIONS_TRIGGER_TOKEN" \
    --data '{"event_type": "TRIGGER_KEYWORDS"}'
    #+END_SRC

- [[https://help.github.com/en/actions/configuring-and-managing-workflows/caching-dependencies-to-speed-up-workflows][Caching dependencies to speed up workflows - GitHub Help]]

  #+BEGIN_SRC yaml
name: Caching with npm

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v1
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install Dependencies
      run: npm install

    - name: Build
      run: npm build

    - name: Test
      run: npm test
  #+END_SRC

* Computer Science
- [[https://github.com/ossu/computer-science][ossu/ computer-science]] - Path to a free self-taught education in Computer
  Science
- [[https://teachyourselfcs.com/][Teach Yourself Computer Science]]
- [[https://www.bilibili.com/video/av21376839/][Crash Course Computer Science]] - 中英字幕

* Programming
- [[http://norvig.com/21-days.html][Teach Yourself Programming in Ten Years]]
- [[http://coolshell.cn/articles/4990.html][程序员技术练级攻略 - 2011年07月]]
  - [[https://exuanbo.xyz/posts/programmer/][2018 新版索引]]
- [[https://blog.knownsec.com/Knownsec_RD_Checklist/index.html][知道创宇研发技能表]] - "聪明的人，会根据每个tip自驱动扩展"
- [[https://regex101.com/][Online regex tester and debugger: PHP, PCRE, Python, Golang and JavaScript]]

** Functional Programming
- [[https://bitemyapp.com/blog/functional-education/][Chris Allen - Functional Education]]
  - and his book [[https://haskellbook.com/][Haskell Programming]]
- [[http://www.cs.cornell.edu/courses/cs3110/][CS 3110 Spring 2020]]

*** Haskell
- [[http://learnyouahaskell.com/chapters][Learn You a Haskell for Great Good!]]
- [[https://www.seas.upenn.edu/~cis194/fall16/index.html][CIS194]]

**** Environment Setup
- [[https://www.haskell.org/platform/][Haskell Platform]] - Installs GHC, Cabal, and some other tools, along with a
  starter set of libraries in a global location on your system.

  #+BEGIN_SRC sh
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
curl -sSL https://get.haskellstack.org/ | sh
  #+END_SRC

- Using Homebrew

  #+BEGIN_SRC sh
brew install cabal-install ghc
brew haskell-stack
stack setup
  #+END_SRC

** C++
- [[https://github.com/TheLartians/ModernCppStarter][TheLartians/ ModernCppStarter]] - Kick-start your C++! A template for modern C++
  projects using CMake, CI, code coverage, clang-format, reproducible dependency
  management and more

** Java
- [[https://github.com/hollischuang/toBeTopJavaer][hollischuang/ toBeTopJavaer]] - Java工程师成神之路

** Python
- [[https://github.com/satwikkansal/wtfpython][satwikkansal/ wtfpython]] - Exploring and understanding Python through
  surprising snippets

*** Tips
- [[https://stackoverflow.com/questions/11248073/what-is-the-easiest-way-to-remove-all-packages-installed-by-pip][What is the easiest way to remove all packages installed by pip?]]

  #+BEGIN_SRC sh
pip freeze > requirements.txt
pip uninstall -r requirements.txt -y

# or a single command without any file
pip uninstall -y -r <(pip freeze)
  #+END_SRC

* Web
- [[https://codeguide.co/][Code Guide by @mdo]] - Standards for developing consistent, flexible, and
  sustainable HTML and CSS
- [[https://github.com/gothinkster/realworld][gothinkster/ realworld]] - Exemplary fullstack Medium.com clone powered by
  React, Angular, Node, Django, and many more

** Javascript
- [[https://github.com/trekhleb/javascript-algorithms][trekhleb/ javascript-algorithms]] - Algorithms and data structures implemented
  in JavaScript with explanations and links to further readings
- [[https://stackoverflow.com/questions/16839698/jquery-getscript-alternative-in-native-javascript][jQuery.getScript alternative in native JavaScript - Stack Overflow]]

  #+BEGIN_SRC js
const loadScript = (source, options) => {
  return new Promise((resolve, reject) => {
    let script = document.createElement('script')
    const prior = document.getElementsByTagName('script')[0]

    function onloadHander(_, isAbort) {
      if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
        script.onload = null
        script.onreadystatechange = null
        script = undefined

        isAbort ? reject(new Error('Failed to load script')) : resolve()
      }
    }

    const attributes = {
      async: false,
      defer: true
    }

    if (options) {
      for (const i in options) {
        attributes[i] = options[i]
      }
    }

    for (const i in attributes) {
      script[i] = attributes[i]
    }

    script.onload = onloadHander
    script.onreadystatechange = onloadHander
    script.src = source
    prior.parentNode.insertBefore(script, prior)
  })
}
  #+END_SRC

- [[https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver][IntersectionObserver - Web APIs | MDN]]
- [[https://github.com/JSMonk/hegel][JSMonk/ hegel]] - An advanced static type checker

** Typescript
- [[https://typedoc.org/][Home | TypeDoc]] - A documentation generator for TypeScript projects

** Node.js
** NPM
- [[https://developer.aliyun.com/mirror/NPM][NPM镜像-NPM下载地址-NPM安装教程-阿里巴巴开源镜像站]]

** Gulp.js
[[https://gulpjs.com/][gulp.js]] - The streaming build system

#+BEGIN_SRC js
function defaultTask(cb) {
  // place code for your default task here
  cb();
}

exports.default = defaultTask
#+END_SRC

*** Example
- same ~src~ and ~dest~

  #+BEGIN_SRC js
function html() {
  return src('public/**/*.html', { base: '.' })
    .pipe(
      htmlmin({
        collapseWhitespace: true,
        conservativeCollapse: true,
      })
    )
    .pipe(dest('.'))
}
  #+END_SRC

- ~gulp.watch()~ + browser-sync

  #+BEGIN_SRC js
const browserSync = require('browser-sync').create()

function server() {
  browserSync.init({
    server: {
      baseDir: './public',
    },
  })
  watch(
    [
      'assets/**',
      '!assets/build/**',
      'content/**',
      'layouts/**',
      'static/**',
      'config.toml',
    ],
    { ignoreInitial: false },
    series('default')
  )
  watch('public/**').on('change', browserSync.reload)
}

exports.server = server
  #+END_SRC

*** Plugins
- gulp-rename
- gulp-inject-inline

**** Javascript
- gulp-concat
- gulp-uglify-es

**** CSS
- gulp-concat-css
- gulp-postcss

**** HTML
- gulp-htmlmin

** PostCSS
[[https://postcss.org/][PostCSS - a tool for transforming CSS with JavaScript]]

*** Plugins
- [[https://github.com/postcss/postcss-import][postcss/ postcss-import]] - PostCSS plugin to inline @import rules content
- @fullhuman/postcss-purgecss
- autoprefixer
- cssnano - A modular minifier based on the PostCSS ecosystem

  #+BEGIN_SRC js
const plugins = [
  cssnano({
    preset: ['default', { discardComments: { removeAll: true } }]
  })
]
  #+END_SRC

** Tailwind CSS
[[https://tailwindcss.com/][Tailwind CSS - A Utility-First CSS Framework for Rapidly Building Custom Designs]]

** CSS
- [[https://github.com/robsheldon/sscaffold-css][robsheldon/ sscaffold-css]] - Combines css rules from normalize.css and
  skeleton.css
- [[https://css-tricks.com/new-year-new-job-lets-make-a-grid-powered-resume/][Let's Make a Grid-Powered Resume! | CSS-Tricks]]
- [[https://css-tricks.com/scale-svg/][How to Scale SVG | CSS-Tricks]]

** Static Site Generator
*** Hugo
- [[https://github.com/fenneclab/hugo-bin][fenneclab/ hugo-bin]] - Binary wrapper for Hugo
- [[https://github.com/dirkolbrich/hugo-theme-tailwindcss-starter][dirkolbrich/ hugo-theme-tailwindcss-starter]] - Starter files for a Hugo theme
  with Tailwindcss

*** Saber
[[https://github.com/saberland/saber][saberland /saber]] ()==[:::::::::::::> Build static sites in Vue.js, without the
hassle

** Browser
*** Userscript
- [[https://greasyfork.org/][Greasy Fork - safe and useful user scripts]]

*** Chrome
**** Chrome Extensions
- uBlacklist
  - [[https://github.com/cobaltdisco/Google-Chinese-Results-Blocklist][cobaltdisco/ Google-Chinese-Results-Blocklist]]
  - [[https://github.com/gyli/Blocklist][gyli/ Blocklist]]
- [[https://github.com/truedread/netflix-1080p][truedread/ netflix-1080p]] - Chrome extension to play Netflix in 1080p and 5.1
- [[https://chrome.google.com/webstore/detail/sync-sofa-beta-online-vid/kgpnhgmpijhpkefpddoehhminpfiddmg][Sync Sofa (beta) - Online Video Synchronizer - Chrome Web Store]]

** Resource
*** Icons
- [[https://favicon.io/favicon-generator/][The best Favicon Generator (completely free) | Favicon.io]]
- [[https://github.com/yoksel/url-encoder/][Url encoder for SVG]]
- [[https://ikonate.com/][Ikonate – fully customisable & accessible vector icons]]
- [[https://iconmonstr.com/][iconmonstr - Free simple icons for your next project]]
- [[https://simpleicons.org/][Simple Icons]] - Free SVG icons for popular brands
- [[https://github.com/refactoringui/heroicons][refactoringui/ heroicons]] - A set of free MIT-licensed high-quality SVG icons
  for UI development
- [[https://github.com/tabler/tabler-icons][tabler/ tabler-icons]] - A set of over 300 free MIT-licensed high-quality SVG
  icons for you to use in your web projects

* iOS

* Game
** General
*** Articles
- [[https://www.gcores.com/articles/120777][《毁灭战士》究竟讲了一个什么故事？ | 机核 GCORES]]
- [[https://www.gcores.com/articles/122421][致敬《盟军敢死队》：开宗立派，但无来者可追 | 机核 GCORES]]

** Development
- [[https://academy.zenva.com/][Zenva Academy]]
- [[https://indienova.com/groups/14][我们都爱像素风 - Indienova 小组]]

* Git
- [[https://learngitbranching.js.org/][Learn Git Branching]] - the most visual and interactive way to learn Git on the web
- [[https://github.com/commitizen/cz-cli][commitizen/ cz-cli]] - Simple commit conventions for internet citizens
- ~git reset~

  #+BEGIN_EXAMPLE

               (default)
      --soft    --mixed   --hard
----------------------------------------- commit (repository)
         |         |         |
         V         |         |
----------------------------------------- stage (index)
                   |         |
                   V         |
----------------------------------------- unstage (working tree)
                             |
                             V
                          discard

  #+END_EXAMPLE

** Hacks
*** Hook
- auto sync to Dropbox after commit

  1. ~vim ~/.gitconfig~

    #+BEGIN_SRC conf
[core]
  hooksPath = /Users/xuanbo/Dropbox/git/hooks # your hook file folder
    #+END_SRC

  2. ~vim ~/Dropbox/git/hooks/post-commit~

    #+BEGIN_SRC bash
#!/usr/bin/env bash

set -e # always immediately exit upon error

# directory config. ending slashes are important!
src_dir="$HOME/repositories/"
dest_dir="$HOME/Dropbox/repositories/"

# run the sync
rsync -arv --delete-after --delete-excluded --progress \
  --filter="dir-merge,- .gitignore" \
  --exclude-from="$HOME/.gitignore_global" \ # if exists
  --chmod="F-w" \
  "$src_dir" "$dest_dir"
    #+END_SRC

** Pull-Request steps
[[http://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/][The beginner's guide to contributing to a GitHub project]]

1. Fork the project and clone locally
2. ~git remote add upstream git@github.com:xxx/xxx.git~
3. ~git checkout -b newBranch~
4. Do something and commit
5. ~git pull --rebase upstream master~
6. ~git push origin~

** Command

#+BEGIN_SRC sh
git init  # 在当前目录新建一个 Git 代码库
git clone [url]  # 下载一个项目和它的整个代码历史
git config --list # 显示当前的 Git 配置
git config -e [--global]  # 编辑 Git 配置文件
git add  # 添加指定文件到暂存区
git rm   # 删除工作区文件，并且将这次删除放入暂存区
git commit -m [message]  # 提交暂存区到仓库区
git commit -a # 提交工作区自上次 commit 之后的变化，直接到仓库区
git commit --amend -m [message]   # 使用一次新的 commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次 commit 的提交信息
git commit --amend [file1] [file2] ...  # 重做上一次 commit，并包括指定文件的新变化

# 分支相关
git branch  # 列出所有本地分支
git branch -r  # 列出所有远程分支
git branch [branch-name]  # 新建一个分支，但依然停留在当前分支
git checkout [branch-name]  # 切换到指定分支，并更新工作区
git checkout -b [branch]  # 新建一个分支，并切换到该分支
git branch [branch] [commit]  # 新建一个分支，指向指定 commit
git checkout -b [branch] [tag]  # 新建一个分支，指向某个 tag
git branch --track [branch] [remote-branch]  # 新建一个分支，与指定的远程分支建立追踪关系
git branch --set-upstream [branch] [remote-branch]  # 建立追踪关系，在现有分支与指定的远程分支之间
git merge [branch]  # 合并指定分支到当前分支
git cherry-pick [commit]  # 选择一个 commit，合并进当前分支
git branch -d [branch-name]  # 删除分支
git push origin --delete [branch-name] # 删除远程分支
git branch -dr [remote/branch]  # 删除远程分支

# 标签
git tag  # 列出所有 tag
git tag [tag] # 新建一个 tag 在当前 commit
git tag [tag] [commit] # 新建一个 tag 在指定 commit
git show [tag]  # 查看 tag 信息
git push [remote] [tag]  # 提交指定 tag
git push [remote] --tags   # 提交所有 tag

# 查看
git status # 显示有变更的文件
git log # 显示当前分支的版本历史
git log --stat # 显示 commit 历史，以及每次 commit 发生变更的文件
git log --follow [file] # 显示某个文件的版本历史，包括文件改名
git log -p [file] # 显示指定文件相关的每一次 diff
git blame [file] # 显示指定文件是什么人在什么时间修改过
git diff # 显示暂存区和工作区的差异
git diff --cached [file] # 显示暂存区和上一个 commit 的差异
git diff HEAD # 显示工作区与当前分支最新 commit 之间的差异
git diff [first-branch]...[second-branch] # 显示两次提交之间的差异
git show [commit] # 显示某次提交的元数据和内容变化
git show --name-only [commit] # 显示某次提交发生变化的文件
git show [commit]:[filename] # 显示某次提交时，某个文件的内容
git reflog # 显示当前分支的最近几次提交

# 远程
git fetch [remote] # 下载远程仓库的所有变动
git remote -v  # 显示所有远程仓库
git remote show [remote]  # 显示某个远程仓库的信息
git remote add [shortname] [url]  # 增加一个新的远程仓库，并命名
git pull [remote] [branch]  # 取回远程仓库的变化，并与本地分支合并
git push [remote] [branch] # 上传本地指定分支到远程仓库
git push [remote] --force # 强行推送当前分支到远程仓库，即使有冲突
git push [remote] --all # 推送所有分支到远程仓库

# 撤销
git checkout [file] # 恢复暂存区的指定文件到工作区
git checkout [commit] [file] # 恢复某个 commit 的指定文件到工作区
git checkout . # 恢复上一个 commit 的所有文件到工作区
git reset [file] # 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变
git reset --hard # 重置暂存区与工作区，与上一次 commit 保持一致
git reset [commit] # 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变
git reset --hard [commit] # 重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致
git reset --keep [commit] # 重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变
git revert [commit] # 新建一个 commit，用来撤销指定 commit，后者的所有变化都将被前者抵消，并且应用到当前分支
#+END_SRC

* Text Editor
- [[https://editorconfig.org/][EditorConfig]]
  - [[https://github.com/editorconfig/editorconfig-emacs][editorconfig-emacs]] - EditorConfig plugin for Emacs

** Emacs

#+BEGIN_EXAMPLE

       +================================+
       |                                |
    +===============================+   |
    |                               |   |
+===============================+   |   |
|              |                |   |   | ..... Frame 3
|   Window 2   |                |   |   |
|              |                |   |---+
|--------------|    Window 1    |   | ......... Frame 2
|              |                |---+
|   Window 3   |                |
|              |                | ............. Frame 1
+-------------------------------+

#+END_EXAMPLE

*** Emacs Lisp
- [[https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html][Programming in Emacs Lisp]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top][GNU Emacs Lisp Reference Manual]]

**** Style
- [[https://github.com/bbatsov/emacs-lisp-style-guide][bbatsov/ emacs-lisp-style-guide]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Tips.html][Appendix D Tips and Conventions - GNU Emacs Lisp Reference Manual]]

*** Tips
- [[https://stackoverflow.com/questions/2736087/eval-after-load-vs-mode-hook][eval-after-load vs. mode hook - Stack Overflow]]
  - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Hooks-for-Loading.html][Hooks for Loading - GNU Emacs Lisp Reference Manual]]

  Code wrapped in ~eval-after-load~ will be executed only once, so it is
  typically used to perform one-time setup such as setting default global values
  and behaviour. An example might be setting up a default keymap for a
  particular mode. In ~eval-after-load~ code, there's no notion of the "current
  buffer".

  Mode hooks execute once for every buffer in which the mode is enabled, so
  they're used for /per-buffer/ configuration. Mode hooks are therefore run later
  than ~eval-after-load~ code; this lets them take actions based upon such
  information as whether other modes are enabled in the current buffer.

- [[https://stackoverflow.com/questions/18172728/the-difference-between-setq-and-setq-default-in-emacs-lisp][The difference between setq and setq-default in Emacs Lisp]]

  Some variables in Emacs are "buffer-local", meaning that each buffer is
  allowed to have a separate value for that variable that overrides the global
  default. ~tab-width~ is a good example of a buffer-local variable.

  If a variable is buffer-local, then ~setq~ sets its local value in the current
  buffer and ~setq-default~ sets the global default value.

  If a variable is not buffer-local, then ~setq~ and ~setq-default~ do the same
  thing.

*** Resource
- [[https://emacs-china.org/][Emacs China]]
- [[https://emacs.stackexchange.com/][Emacs Stack Exchange]]
- [[https://www.reddit.com/r/emacs/][M-x emacs-reddit]]

**** Blog
- [[https://planet.emacslife.com/][Planet Emacslife]]
- [[https://sachachua.com/][Living an awesome Life - Sacha Chua]]

**** GitHub
- [[https://github.com/search?p=1&q=stars%3A%3E20+extension%3Ael+language%3Aelisp&ref=searchresults&type=Repositories][Github Search · stars:>20 extension:el language:elisp]]
- [[https://github.com/lujun9972/emacs-document][lujun9972/ emacs-document]] - translate emacs documents to Chinese for
  convenient reference
- [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org][mastering-emacs-in-one-year-guide /guide-zh.org]]

**** Tutorial
- [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Buy Xah Emacs Tutorial]]
- [[http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html][Stevey's Blog Rants: Emergency Elisp]]

*** Packages
- [[https://github.com/NicolasPetton/gulp-task-runner][NicolasPetton/ gulp-task-runner]] - Run gulp tasks from Emacs =M-x gulp=
- [[https://magit.vc/][It's Magit! A Git Porcelain inside Emacs]]

** Spacemacs
[[https://github.com/syl20bnr/spacemacs][syl20bnr/ spacemacs]] - A community-driven Emacs distribution

- [[http://book.emacs-china.org/][Master Emacs in 21 Days]]
- [[https://github.com/syl20bnr/spacemacs/blob/develop/EXPERIMENTAL.org#spacemacs-dumps-using-the-portable-dumper][Spacemacs dumps using the portable dumper]]

*** Configuration
A dotdirectory =/.spacemacs.d= can be used instead of a dotfile. If you want
to use this option, move =/.spacemacs= to =/.spacemacs.d/init.el=.

My configuration [[https://github.com/exuanbo/dotfiles/tree/master/.spacemacs.d][exuanbo/ dotfiles/.spacemacs.d]]

for reference:

- [[https://github.com/zilongshanren/spacemacs-private][zilongshanren/ spacemacs-private]]
- [[https://github.com/geekplux/dotfiles][geekplus/ dotfiles]]

*** Layers
- [[https://develop.spacemacs.org/layers/+checkers/spell-checking/README.html][Spell Checking layer]]

  ~brew install ispell~

*** Tips
- [[https://github.com/syl20bnr/spacemacs/issues/3920][Environment variable warnings #3920]]

  Put ~(setq exec-path-from-shell-arguments '("-l"))~ in your
  ~dotspacemacs/user-init~

** Doom Emacs
[[https://github.com/hlissner/doom-emacs][hlissner/ doom-emacs]] - An Emacs configuration for the stubborn martian vimmer

- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/index.org][Doom Emacs Documentation]]
- [[https://github.com/hlissner/emacs-doom-themes][hlissner/ emacs-doom-themes]]
- [[https://github.com/hlissner/doom-snippets][hlissner/ doom-snippets]] - The Doom Emacs snippets library

My configuration [[https://github.com/exuanbo/.doom.d][.doom.d]]

*** Modules
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/term/vterm/README.org][term/vterm]] - =+vterm/toggle= (=SPC o t=): Toggle vterm pop up window in the
  current project

*** Hacks
- [[https://github.com/hlissner/doom-emacs/issues/397][Need doom/toggle-maximized command #397]]

  #+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
  #+END_SRC

- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/README.org][modules/lang/org]]

  TAB was changed to toggle only the visibility state of the current subtree,
  rather than cycle through it recursively. This can be reversed with:

  #+BEGIN_SRC emacs-lisp
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
  #+END_SRC

- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#doom-crashes-when][Doom crashes when…]]

  On some systems (particularly MacOS), manipulating the fringes or window
  margins can cause Emacs to crash. This is most prominent in the Doom Dashboard
  (which tries to center its contents), in org-mode buffers (which uses
  =org-indent-mode= to create virtual indentation), or magit. There is currently
  no known fix for this, as it can’t be reliably reproduced. Your best bet is to
  reinstall/rebuild Emacs or disable the errant plugins/modules. e.g.

  To disable org-indent-mode:

  #+BEGIN_SRC emacs-lisp
(after! org
  (setq org-startup-indented nil))
  #+END_SRC

  Or disable the =:ui doom-dashboard= & =:tools magit= modules (see [[https://github.com/hlissner/doom-emacs/issues/1170][#1170]]).

** Other configuration
- [[https://github.com/purcell/emacs.d][purcell /emacs.d]] - An Emacs configuration bundle with batteries included

** Vim
- [[https://github.com/amix/vimrc][amix/ vimrc]] - The ultimate Vim configuration
  - [[https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim][basic.vim]]
- [[https://github.com/editor-bootstrap/vim-bootstrap][vim-bootstrap]] - is generator provides a simple method of generating a .vimrc
  configuration for vim

** Visual Studio Code
- [[https://github.com/viatsko/awesome-vscode][awesome-vscode]] - A curated list of delightful VS Code packages and resources
- [[https://zhuanlan.zhihu.com/p/73561114][从 Emacs 和 Vim 到 VSCode - 知乎]]
- [[https://github.com/VSpaceCode/VSpaceCode][VSpaceCode]] - Spacemacs' like keybindings for Visual Studio Code
- [[https://zhuanlan.zhihu.com/p/125773296][那些你应该考虑卸载的 VSCode 扩展 - 知乎]]

* Org Mode
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://orgmode.org/worg/index.html][Hello Worg, the Org-Mode Community!]]
- [[https://github.com/fniessen/refcard-org-mode][fniessen/ refcard-org-mode]] - Org mode syntax

** Configuration
*** General

#+BEGIN_SRC emacs-lisp
(setq org-export-with-sub-superscripts nil
      org-html-doctype "html5"
      org-html-html5-fancy t ; enable new block elements introduced with the HTML5 standard
      org-html-head-include-default-style nil
      org-html-htmlize-output-type 'css)
#+END_SRC

- [[https://emacs.stackexchange.com/questions/41220/org-mode-disable-indentation-when-promoting-and-demoting-trees-subtrees][Org-mode : disable indentation when promoting and demoting trees + subtrees
  -...]]

  #+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation nil)
  #+END_SRC

- [[https://emacs.stackexchange.com/questions/9472/org-mode-source-block-doesnt-respect-parent-buffer-indentation][Org-mode: Source block doesn't respect parent buffer indentation]]

  #+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
  #+END_SRC

*** for Spacemacs

#+BEGIN_SRC emacs-lisp
dotspacemacs-configuration-layers
'((org :variables
       org-projectile-file "TODOs.org"
       org-want-todo-bindings t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/user-config ()
  (with-eval-after-load 'org
    (setq ... )))
#+END_SRC

*** [[https://github.com/gongzhitaao/orgcss][gongzhitaao/ orgcss]]

When exported to HTML, there are three options for code highlighting, controlled
by the variable ~org-html-htmlize-output-type~.

1. ~(setq org-html-htmlize-output-type 'inline-css)~

  This is the default setting. It highlights the code according to the current
  Emacs theme you are using. It directly applies color to the code with
  inline styles, e.g., ~<span style="color: 0x000000">int</span>~.

  The problem is that the highlight theme depends on the Emacs theme. If you use
  a dark theme in your Emacs but a light theme (usually we like light themed
  web pages) web pages, the exported code are hardly illegible due to the light
  font color, or vice versa.

2. ~(setq org-html-htmlize-output-type nil)~

  This configuration disables highlighting by =htmlize=. You may use a
  third-party Javascript highlight library. I recommend [[https://highlightjs.org/][highlight.js]] if I
  need code highlight.

  There are two problems:

  1. The problem is that you have to rely on highlight.js support on a certain
     language which is occasionally missing, e.g., =emacs-lisp=, =org=, etc.
  2. =highlight.js= by default does not recognized the tags and classes exported
     by org mode. You need some extra Javascript code in your Org file.

3. ~(setq org-html-htmlize-output-type 'css)~

  This is similar to the first optional, instead of using inline styles, this
  will assign classes to each component of the code, e.g., ~<span
  class="org-type">int</span>~, and you could create your own stylesheet for ~.org-type~.

  To obtain a list of all supported org classes, run =M-x
  org-html-htmlize-generate-css=.  This will create a buffer containing all the
  available org style class names in the current Emacs session.

** Hacks
- [[https://emacs.stackexchange.com/questions/3374/set-the-background-of-org-exported-code-blocks-according-to-theme][org mode - Set the background of org-exported <code> blocks according to
  them...]]

  #+BEGIN_SRC emacs-lisp
(defun my/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the
background of code to whatever theme I'm using's background"
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                my-pre-bg my-pre-fg))))))

(add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)
  #+END_SRC

  the same way to insert inline CSS or Javascript from local files:

  #+BEGIN_SRC emacs-lisp
(defun my/org-inline-source-hook (exporter)
  (when (eq exporter 'html)
    (setq org-html-head-extra (concat
                              "<style type=\"text/css\">\n"
                              "<!--/*--><![CDATA[/*><!--*/\n"
                              (with-temp-buffer
                                (insert-file-contents "style.css")
                                (buffer-string))
                              "\n"
                              "/*]]>*/-->\n"
                              "</style>\n"
                              "<script type=\"text/javascript\">\n"
                              "<!--/*--><![CDATA[/*><!--*/\n"
                              (with-temp-buffer
                                (insert-file-contents "script.js")
                                (buffer-string))
                              "\n"
                              "/*]]>*/-->\n"
                              "</script>\n"))))

(add-hook 'org-export-before-processing-hook 'my/org-inline-source-hook)
  #+END_SRC

- [[https://stackoverflow.com/questions/19614104/how-to-tell-org-mode-to-embed-my-css-file-on-html-export][emacs - how to tell org-mode to embed my css file on HTML export? - Stack
  Ove...]]
- [[https://emacs-china.org/t/org-mode-html/10120][有没有办法让org-mode导出的html页面漂亮一点？ - Emacs-general - Emacs China]]
- [[https://github.com/rgb-24bit/org-html-theme-list][rgb-24bit/ org-html-theme-list]] - 这个仓库用于存放我收集的
  =org-export-to-html= 样式或主题
- [[https://github.com/hlissner/doom-emacs/pull/461][Feature: +style feature that provide better org HTML export default by
  fuxialexander · Pull Request #461 · hlissner/doom-emacs]]
- [[https://github.com/MetroWind/dotfiles-mac/blob/a202acf00072e9bfa2271fec41dcce2421552ae9/emacs/files/.emacs-pkgs/mw-org.el#L134][MetroWind/ dotfiles-mac]]

  #+BEGIN_SRC emacs-lisp
;; Embed inline CSS read from a file.
(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    (let* ((dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (and (or (null dir) (null (file-exists-p path)))
                           (not (null-or-unboundp 'my-org-inline-css-file))))
           (final (if homestyle my-org-inline-css-file path)))
      (if (file-exists-p final)
          (progn
            (setq-local org-html-head-include-default-style nil)
            (setq-local org-html-head (concat
                                       "<style type=\"text/css\">\n"
                                       "<!--/*--><![CDATA[/*><!--*/\n"
                                       (with-temp-buffer
                                         (insert-file-contents final)
                                         (buffer-string))
                                       "/*]]>*/-->\n"
                                       "</style>\n")))))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)
  #+END_SRC

** App
- [[https://beorgapp.com/][beorg]] - iOS | Recommand | in-app purchases
- [[http://mobileorg.github.io/][Mobile Org]] - iOS | Open Source

* LaTeX

* Research
** Tools
- [[https://www.zotero.org/][Zotero | Your personal research assistant]]
  - [[https://sspai.com/post/59035][文献管理利器 Zotero 设置技巧 - 少数派]]

* OS
- [[https://www.atlassian.com/git/tutorials/dotfiles][How to store dotfiles | Atlassian Git Tutorial]] - The best way to store your
  dotfiles: A bare Git repository

  #+BEGIN_SRC sh
git init --bare $HOME/.cfg
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
config config --local status.showUntrackedFiles no
echo "alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'" >> $HOME/.zshrc
  #+END_SRC

  #+BEGIN_SRC sh
config status
config add .vimrc
config commit -m "Add vimrc"
config add .zshrc
config commit -m "Add zshrc"
config push
  #+END_SRC

- [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]]
- [[https://github.com/romkatv/powerlevel10k][romkatv/ powerlevel10k]] -  A Zsh theme. It emphasizes speed, flexibility and
  out-of-the-box experience.
- [[https://unix.stackexchange.com/questions/231316/exiting-terminal-running-nohup-my-script-you-have-running-jobs-ok-to][zsh - Exiting terminal running "nohup ./my_script &" => "You have running
  job...]]

  If you want to not see that message, simply pass the job id to disown, like
  so:

  #+BEGIN_SRC shell
disown %1
  #+END_SRC

  Or, start the job with ~&!~ (zsh-specific trick):

  #+BEGIN_SRC shell
nohup ./my_script.sh &!
  #+END_SRC

** Linux
*** Server

** MacOS
- [[https://www.danrodney.com/mac/][Mac Keyboard Shortcuts & Keystrokes | Dan Rodney]]
- [[https://github.com/jaywcjlove/awesome-mac][Awesome Mac]]
- [[https://github.com/serhii-londar/open-source-mac-os-apps][Awesome macOS open source applications]]
- [[http://brew.sh/][Homebrew]]
  - [[https://github.com/phinze/homebrew-cask][homebrew-cask]]
  - ~brew leavese~ Show installed formulae that are not dependencies of another
    installed formula
  - [[https://github.com/ggPeti/homebrew-rmrec][ggPeti/ homebrew-rmrec]] - Quick and simple command to remove a Homebrew
    package and its dependencies

    #+BEGIN_SRC sh
brew tap ggpeti/rmrec
brew rmrec pkgname
    #+END_SRC

- [[https://github.com/gnachman/iTerm2][iTerm2]]
  - [[https://iterm2.com/documentation-shell-integration.html][Shell Integration - iTerm2]]
  - [[https://www.iterm2.com/documentation-utilities.html][Utilities - iTerm2]]
- [[http://www.alfredapp.com/][Alfred]]
  - [[http://www.alfredworkflow.com/][alfredworkflow]]

*** Setup
- [[http://sourabhbajaj.com/mac-setup/index.html][Mac OS X Setup Guide]]
- 改变 Launchpad 中应用图标的大小

  #+BEGIN_SRC sh
defaults write com.apple.dock springboard-columns -int 列数
defaults write com.apple.dock springboard-rows -int 行数
defaults write com.apple.dock ResetLaunchPad -bool TRUE
killall Dock
  #+END_SRC

*** Zsh
=.zshenv= is sourced on all invocations of the shell, unless the =-f= option is
set. It should contain commands to set the command search path, plus other
important environment variables. =.zshenv= should not contain commands that
produce output or assume the shell is attached to a tty.

*** Tips
- Use iconutil to Create an icns File Manually

  from [[https://stackoverflow.com/questions/12306223/how-to-manually-create-icns-files-using-iconutil][stackoverflow.com/questions/12306223]]

  #+BEGIN_SRC sh
mkdir MyIcon.iconset

# convert a 1024x1024 png (named "Icon1024.png") to the required icns file
sips -z 16 16     Icon1024.png --out MyIcon.iconset/icon_16x16.png
sips -z 32 32     Icon1024.png --out MyIcon.iconset/icon_16x16@2x.png
sips -z 32 32     Icon1024.png --out MyIcon.iconset/icon_32x32.png
sips -z 64 64     Icon1024.png --out MyIcon.iconset/icon_32x32@2x.png
sips -z 128 128   Icon1024.png --out MyIcon.iconset/icon_128x128.png
sips -z 256 256   Icon1024.png --out MyIcon.iconset/icon_128x128@2x.png
sips -z 256 256   Icon1024.png --out MyIcon.iconset/icon_256x256.png
sips -z 512 512   Icon1024.png --out MyIcon.iconset/icon_256x256@2x.png
sips -z 512 512   Icon1024.png --out MyIcon.iconset/icon_512x512.png
cp Icon1024.png MyIcon.iconset/icon_512x512@2x.png

iconutil -c icns MyIcon.iconset
  #+END_SRC

** Windows
- [[https://github.com/t1m0thyj/WinDynamicDesktop][t1m0thyj /WinDynamicDesktop]] - Port of macOS Mojave Dynamic Desktop feature to
  Windows 10

* Hardware
- [[https://www.caldigit.com/][CalDigit – Considerate. Authentic. Design.]]

** DIY
- [[https://github.com/blanboom/awesome-technical-diy-cn][awesome-technical-diy-cn]]

* Self-hosting
[[https://github.com/awesome-selfhosted/awesome-selfhosted][awesome-selfhosted]]

This is a list of Free Software network services and web applications which can
be hosted locally. Non-Free software is listed on the Non-Free page.

** Nginx Configuration
- [[https://ssl-config.mozilla.org/][Mozilla SSL Configuration Generator]]
- [[https://gist.github.com/fotock/9cf9afc2fd0f813828992ebc4fdaad6f][fotock/ nginx.conf]] - Nginx SSL 安全配置最佳实践

#+BEGIN_SRC sh
# 生成 dhparam.pem 文件, 在命令行执行任一方法:

# 方法1: 很慢
openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048

# 方法2: 较快
# 与方法1无明显区别. 2048位也足够用, 4096更强
openssl dhparam -dsaparam -out /etc/nginx/ssl/dhparam.pem 4096
#+END_SRC

- [[https://www.howtoing.com/how-to-host-a-website-using-cloudflare-and-nginx-on-ubuntu-16-04][如何在Ubuntu 16.04上使用Cloudflare和Nginx来托管网站]]

** Analytics
[[https://ackee.electerious.com/][Ackee]] - Self-hosted analytics tool for those who care about privacy. =MIT= =Nodejs=

[[https://github.com/electerious/Ackee/blob/master/docs/SSL%20and%20HTTPS.md][Ackee/docs/SSL and HTTPS]] - Nginx configuration

#+BEGIN_SRC conf
#
# Set "$cors_header" to avoid "if" inside location context
# https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
# https://stackoverflow.com/questions/14499320/how-to-properly-setup-nginx-access-control-allow-origin-into-response-header-bas
#
map $http_origin $cors_header {
    default "";
    ~*^https://([^/]+\.)*(domainone|domaintwo)\.com$ $http_origin;
}

#
# Redirect all www to non-www
#
server {
    listen 80;
    listen 443 ssl;

    server_name www.example.com;

    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    return 301 https://example.com$request_uri;
}

#
# Redirect all non-encrypted to encrypted
#
server {
    listen 80;

    server_name example.com;

    return 301 https://example.com$request_uri;
}

#
# There we go
#
server {
    listen 443 ssl http2;

    server_name example.com;

    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    access_log /var/log/nginx/log/example.com.access.log main;
    error_log  /var/log/nginx/log/example.com.error.log;

    location / {
        add_header          Access-Control-Allow-Origin "$cors_header" always;
        add_header          Access-Control-Allow-Methods "GET, POST, PATCH, OPTIONS" always;
        add_header          Access-Control-Allow-Headers "Content-Type" always;
        add_header          Strict-Transport-Security "max-age=31536000" always;
        add_header          X-Frame-Options deny;
        proxy_pass          http://localhost:3000;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_redirect      off;
        proxy_buffering     off;
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
#+END_SRC

* Uncategorized
- [[https://uses.tech/][/uses]] - A list of =/uses= pages detailing developer setups, gear, software and
  configs
- [[https://github.com/mayswind/AriaNg-Native][mayswind/ AriaNg-Native]] - A better aria2 desktop frontend than AriaNg,
  containing all features of AriaNg and has more features for desktop
